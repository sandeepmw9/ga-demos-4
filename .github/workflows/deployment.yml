name: lint test build and deploy
on:
  push:
    branches:
      - master
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: get code
        uses: actions/checkout@v4
      - name: install dependencies
        run: npm ci
      - name: lint code
        run: npm run lint
  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: get code
        uses: actions/checkout@v4
      - name: install dependencies
        run: npm ci
      - name: test code
        run: npm run test
  build:
    needs: test    
    runs-on: ubuntu-latest
    outputs:
      js-file-name: ${{ steps.publish.outputs.js-file}} #using steps context to get the file name value from step and making it available across jobs.
    steps:
      - name: get code
        uses: actions/checkout@v4
      - name: install dependencies
        run: npm ci
      - name: build project
        run: npm run build
      - name: publish js filename
        id: publish #assigning and id to the step to be referred to by the steps context
        run: find dist/assets/*.js -type f -execdir echo 'js-file={}' >> $GITHUB_OUTPUT ';' # storing the file name value js-file key on step level, also exporting the file the giuthub managed file container $GITHUB_OUTPUT
      - name: upload artifacts  
        uses: actions/upload-artifact@v4 #action used for uploading artifacts from build job runner to github
        with:
          name: my-artifacts #name of artifcts storage dir
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: get code
        uses: actions/checkout@v4
      - name: install dependencies
        run: npm ci
      - name: deploy project
        run: echo "deploying"
      - name: download artifacts
        uses: actions/download-artifact@v4 #action used for downloading artifacts from github to deployment job runner
        with:
          name: my-artifacts # here you need to mention the same name as mentioned in previous build job, using the same name contents of artifacts dir will be unzipped and will be availabe in deployment job
      - name: output artifacts content
        run: ls
      - name: output file name made available from build job #added another step to get the file name which was generated by build job
        run: echo "${{ needs.build.outputs.js-file-name }}" # using needs context to get the filename as needs context stores the outputs from all jobs.